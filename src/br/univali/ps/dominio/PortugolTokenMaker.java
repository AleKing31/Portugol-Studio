package br.univali.ps.dominio;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * A parser for the C++ programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated CPlusPlusTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */

public class PortugolTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\42\1\0\1\47\1\55\22\0\1\47\1\35\1\43"+
    "\1\56\1\57\1\63\1\62\1\33\1\31\1\31\1\50\1\7\1\73"+
    "\1\36\1\53\1\32\1\46\3\40\4\5\2\3\1\66\1\74\1\34"+
    "\1\30\1\34\1\27\1\60\4\4\1\6\1\54\5\1\1\52\10\1"+
    "\1\51\2\1\1\41\2\1\1\61\1\37\1\61\1\55\1\2\1\0"+
    "\1\24\1\45\1\21\1\10\1\11\1\12\1\25\1\64\1\13\2\1"+
    "\1\15\1\26\1\14\1\20\1\23\1\70\1\17\1\16\1\65\1\22"+
    "\1\44\1\67\1\41\1\1\1\71\1\72\1\55\1\72\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\11\2\1\1\1\4"+
    "\1\5\1\4\1\6\1\4\1\1\1\4\1\2\1\7"+
    "\1\10\2\2\1\3\1\11\2\1\2\2\2\12\1\13"+
    "\5\12\1\14\2\12\2\15\2\3\1\16\10\2\1\17"+
    "\11\2\1\0\1\20\1\21\2\22\1\23\1\6\2\10"+
    "\1\24\3\2\1\15\6\1\1\0\1\2\2\0\1\25"+
    "\6\0\1\3\1\0\1\3\1\15\1\16\6\2\1\26"+
    "\20\2\1\6\1\27\1\6\3\22\1\6\2\10\1\30"+
    "\3\2\1\31\4\1\1\32\4\1\6\0\1\2\10\0"+
    "\1\16\1\0\4\2\1\17\1\2\1\33\12\2\1\6"+
    "\1\10\2\2\2\31\7\1\4\0\1\32\4\0\1\2"+
    "\2\0\1\34\2\0\1\35\14\2\1\31\1\32\3\1"+
    "\7\0\1\2\4\0\10\2\2\1\1\32\3\0\5\2"+
    "\2\0\13\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u044a\0\u044a\0\u0501"+
    "\0\267\0\u044a\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u044a\0\u0726\0\u0763\0\u044a\0\u07a0\0\u07dd"+
    "\0\u081a\0\u0857\0\u0894\0\u044a\0\u08d1\0\u090e\0\u094b\0\u0988"+
    "\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u044a\0\u044a"+
    "\0\u0f03\0\u0f40\0\u044a\0\u0f7d\0\u0fba\0\u0ff7\0\u044a\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u044a\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u094b\0\u1572"+
    "\0\u094b\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\364"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u044a\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u1c98\0\u044a\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be"+
    "\0\u23fb\0\u2438\0\u2475\0\u24b2\0\364\0\u24ef\0\364\0\u252c"+
    "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714"+
    "\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4"+
    "\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u30d9\0\u3116\0\u094b\0\267\0\u3153\0\u3190\0\u31cd\0\u320a"+
    "\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2"+
    "\0\u2d83\0\u342f\0\u2e3a\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560"+
    "\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u044a\0\u36ce\0\u370b"+
    "\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3"+
    "\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb"+
    "\0\u3b18\0\u3b55\0\u3b92";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\5\1\13\1\14\1\15\1\5"+
    "\1\16\1\5\1\17\1\20\2\5\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\6\1\5"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\22\2\5"+
    "\1\40\1\5\1\27\1\41\2\4\1\23\1\27\1\22"+
    "\1\5\1\42\1\26\3\5\1\23\1\26\1\43\12\44"+
    "\1\45\27\44\1\46\5\44\1\47\13\44\1\50\2\44"+
    "\1\51\5\44\12\52\1\53\27\52\1\54\21\52\1\55"+
    "\2\52\1\56\5\52\7\4\1\0\17\4\10\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\3\0\2\4\1\0\3\4\3\0\1\4\6\5\1\0"+
    "\17\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\3\57\1\6\1\57\1\6\1\60"+
    "\1\0\1\57\1\60\3\57\1\61\4\57\1\62\4\57"+
    "\10\0\1\57\1\6\1\57\2\0\2\57\1\6\2\0"+
    "\1\62\1\61\1\63\1\57\1\0\3\57\3\0\2\57"+
    "\1\0\3\57\12\0\1\26\20\0\1\26\44\0\1\4"+
    "\6\5\1\0\4\5\1\64\1\5\1\65\10\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\1\4\6\5\1\0\12\5\1\66\1\5\1\67"+
    "\2\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\4\5\1\70"+
    "\12\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\1\5\1\71"+
    "\1\5\1\72\4\5\1\73\6\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\74\6\5\1\75\6\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\1\4\6\5\1\0\1\5\1\76\12\5\1\77"+
    "\2\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\10\5\1\100"+
    "\3\5\1\101\2\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\7\5\1\102\1\103\3\5\1\104\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\15\5\1\105\1\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\32\0"+
    "\1\106\75\0\1\26\171\0\1\26\1\0\1\107\15\0"+
    "\1\110\24\0\27\111\1\112\3\111\1\113\3\111\1\114"+
    "\2\111\1\0\32\111\30\0\1\26\5\0\1\26\36\0"+
    "\37\33\1\115\2\33\1\116\1\117\31\33\1\4\6\5"+
    "\1\0\1\5\1\120\12\5\1\121\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\3\5\1\122\13\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\3\57\1\6\1\57\1\6\1\60\1\0\1\57\1\60"+
    "\3\57\1\61\4\57\1\62\4\57\10\0\1\57\1\6"+
    "\1\123\2\0\2\57\1\6\2\0\1\62\1\61\1\63"+
    "\1\57\1\0\3\57\3\0\2\57\1\0\3\57\52\0"+
    "\1\37\30\0\1\63\1\0\1\63\32\0\1\63\5\0"+
    "\1\63\26\0\7\4\1\0\1\124\1\125\1\4\1\126"+
    "\1\4\1\127\4\4\1\130\1\131\3\4\10\0\3\4"+
    "\2\0\3\4\1\132\1\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\3\0\1\4\6\5"+
    "\1\0\14\5\1\133\2\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\12\44\1\0"+
    "\27\44\1\0\5\44\1\0\13\44\1\0\2\44\1\0"+
    "\5\44\13\0\1\134\51\0\1\135\41\0\1\136\127\0"+
    "\1\137\76\0\1\140\5\0\12\52\1\0\27\52\1\0"+
    "\21\52\1\0\2\52\1\0\5\52\13\0\1\141\51\0"+
    "\1\142\74\0\1\143\76\0\1\144\5\0\7\57\1\0"+
    "\17\57\10\0\3\57\2\0\3\57\2\0\2\57\1\0"+
    "\1\57\1\0\3\57\3\0\2\57\1\0\3\57\3\0"+
    "\3\57\1\145\1\57\1\145\1\57\1\146\17\57\7\0"+
    "\1\146\1\57\1\145\1\57\2\0\2\57\1\145\2\0"+
    "\2\57\1\0\1\57\1\0\3\57\3\0\2\57\1\0"+
    "\3\57\3\0\7\57\1\0\12\57\1\147\4\57\10\0"+
    "\3\57\2\0\3\57\2\0\1\147\1\57\1\0\1\57"+
    "\1\0\3\57\3\0\2\57\1\0\3\57\3\0\7\57"+
    "\1\0\5\57\1\147\11\57\10\0\3\57\2\0\3\57"+
    "\2\0\1\57\1\147\1\0\1\57\1\0\3\57\3\0"+
    "\2\57\1\0\3\57\3\0\3\57\1\63\1\57\1\63"+
    "\1\150\1\0\1\57\1\150\1\151\2\57\1\151\11\57"+
    "\10\0\1\57\1\63\1\57\2\0\2\57\1\63\2\0"+
    "\1\57\1\151\1\0\1\151\1\0\3\57\3\0\2\57"+
    "\1\0\3\57\3\0\1\4\6\5\1\0\17\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\1\5"+
    "\1\152\1\5\3\0\1\4\6\5\1\0\11\5\1\153"+
    "\5\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\4\5\1\154"+
    "\12\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\5\5\1\155"+
    "\3\5\1\156\5\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\11\5\1\157\5\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\1\5\1\160\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\3\5\1\161\13\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\16\5\1\162\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\15\5\1\163\1\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\4\5\1\164\12\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\7\5\1\165\7\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\14\5\1\166\2\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\1\5\1\167\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\3\5\1\170\13\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\4\5\1\171\12\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\1\172\5\5\1\173\1\174\7\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\10\5\1\175\6\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\1\5\1\176\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\7\5\1\177\7\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\12\5\1\200\4\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\33\0\7\26"+
    "\36\0\33\201\1\202\6\201\1\0\61\201\1\203\3\201"+
    "\1\202\6\201\1\0\37\201\1\204\4\201\1\111\1\201"+
    "\1\111\2\201\1\111\4\201\1\111\2\201\1\111\3\201"+
    "\1\205\3\201\1\111\1\206\1\207\1\0\3\111\1\206"+
    "\16\201\1\111\7\201\5\116\1\33\4\116\1\33\1\116"+
    "\1\33\2\116\1\33\4\116\1\33\2\116\1\33\3\116"+
    "\1\33\3\116\2\33\1\210\1\0\4\33\16\116\1\33"+
    "\46\116\1\211\3\116\1\212\31\116\1\4\6\5\1\0"+
    "\7\5\1\213\7\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\17\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\2\5\1\214\3\0\1\4\6\5\1\0\17\5"+
    "\10\0\1\4\2\5\2\0\1\5\1\215\1\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\3\57\4\216\1\0\3\216"+
    "\6\57\1\216\2\57\1\216\2\57\10\0\1\57\1\216"+
    "\1\57\2\0\1\57\2\216\2\0\2\57\1\0\1\216"+
    "\1\0\3\57\3\0\2\57\1\0\3\57\3\0\7\4"+
    "\1\0\1\4\1\217\15\4\10\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\3\4\3\0\7\4\1\0\4\4\1\220\1\221"+
    "\1\4\1\222\7\4\10\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\3\4\3\0\7\4\1\0\2\4\1\223\1\4\1\224"+
    "\12\4\10\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\3\4\3\0"+
    "\7\4\1\0\3\4\1\225\13\4\10\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\3\4\3\0\7\4\1\0\4\4\1\226"+
    "\12\4\10\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\3\4\3\0"+
    "\7\4\1\0\7\4\1\227\7\4\10\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\3\4\13\0\1\230\1\231\1\0\1\232"+
    "\1\0\1\233\4\0\1\234\1\235\23\0\1\132\25\0"+
    "\1\4\6\5\1\0\16\5\1\236\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\20\0\1\237"+
    "\102\0\1\240\136\0\1\241\76\0\1\242\22\0\1\243"+
    "\102\0\1\244\136\0\1\245\76\0\1\246\5\0\3\57"+
    "\1\145\1\57\1\145\1\57\1\0\5\57\1\61\4\57"+
    "\1\62\4\57\10\0\1\57\1\145\1\57\2\0\2\57"+
    "\1\145\2\0\1\62\1\61\1\0\1\57\1\0\3\57"+
    "\3\0\2\57\1\0\3\57\6\0\1\145\1\0\1\145"+
    "\32\0\1\145\5\0\1\145\26\0\3\57\1\247\1\57"+
    "\1\247\1\57\1\250\17\57\7\0\1\250\1\57\1\247"+
    "\1\57\2\0\2\57\1\247\2\0\2\57\1\0\1\57"+
    "\1\0\3\57\3\0\2\57\1\0\3\57\3\0\1\4"+
    "\6\5\1\0\12\5\1\251\4\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\7\5\1\252\1\253\6\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\11\5\1\164\5\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\6\5\1\254\10\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\14\5\1\255\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\5\5\1\256\11\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\14\5\1\257\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\13\5\1\161\3\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\3\5\1\260\13\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\14\5\1\173\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\1\5\1\261\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\5\5\1\160\11\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\10\5\1\262\6\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\17\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\2\5\1\257\3\0\1\4\6\5"+
    "\1\0\6\5\1\263\10\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\1\5\1\264\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\265\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\10\5\1\255\6\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\14\5\1\266\2\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\15\5\1\267\1\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\270\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\255\12\5\1\255\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\1\4\6\5\1\0\14\5\1\271\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\33\201\1\113\6\201\1\0\62\201\3\111\1\205"+
    "\3\111\3\201\1\0\37\201\1\111\25\201\1\202\4\201"+
    "\1\111\1\201\1\0\3\201\1\111\26\201\33\0\1\202"+
    "\41\0\5\201\1\204\25\201\1\202\4\201\1\204\1\201"+
    "\1\0\3\201\1\204\31\201\4\272\1\201\3\272\6\201"+
    "\1\272\2\201\1\272\6\201\1\113\4\201\1\272\1\201"+
    "\1\0\2\201\2\272\5\201\1\272\20\201\3\116\4\273"+
    "\1\116\3\273\6\116\1\273\2\116\1\273\12\116\1\211"+
    "\1\273\2\116\1\212\1\116\2\273\5\116\1\273\62\116"+
    "\1\0\32\116\1\4\6\5\1\0\1\274\16\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\1\4\6\5\1\0\3\5\1\254\13\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\1\4\6\5\1\0\5\5\1\275\11\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\3\57\4\216\1\0\3\216\2\57\1\276\3\57"+
    "\1\216\1\277\1\57\1\216\2\57\10\0\1\57\1\216"+
    "\1\57\2\0\1\57\2\216\2\0\1\277\1\276\1\0"+
    "\1\216\1\0\3\57\3\0\2\57\1\0\3\57\3\0"+
    "\7\4\1\0\2\4\1\127\14\4\10\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\3\4\3\0\7\4\1\0\1\300\16\4"+
    "\10\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\3\4\3\0\7\4"+
    "\1\0\3\4\1\301\2\4\1\302\10\4\10\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\3\0\2\4\1\0\3\4\3\0\7\4\1\0\7\4"+
    "\1\303\7\4\10\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\3\0\2\4\1\0\3\4"+
    "\3\0\7\4\1\0\1\304\3\4\1\226\12\4\10\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\3\0\7\4\1\0"+
    "\11\4\1\305\5\4\10\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\3\4\3\0\7\4\1\0\4\4\1\302\12\4\10\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\3\0\7\4\1\0"+
    "\1\304\16\4\10\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\3\0\2\4\1\0\3\4"+
    "\3\0\7\4\1\0\14\4\1\306\2\4\10\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\3\0\2\4\1\0\3\4\14\0\1\307\77\0\1\310"+
    "\1\311\1\0\1\312\67\0\1\313\1\0\1\314\73\0"+
    "\1\315\75\0\1\316\77\0\1\317\55\0\1\4\6\5"+
    "\1\0\14\5\1\320\2\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\14\0\1\240\151\0"+
    "\1\321\31\0\1\322\124\0\1\323\32\0\1\244\151\0"+
    "\1\324\31\0\1\325\124\0\1\326\21\0\3\57\1\247"+
    "\1\57\1\247\1\57\1\0\2\57\1\151\2\57\1\151"+
    "\11\57\10\0\1\57\1\247\1\57\2\0\2\57\1\247"+
    "\2\0\1\57\1\151\1\0\1\151\1\0\3\57\3\0"+
    "\2\57\1\0\3\57\6\0\1\247\1\0\1\247\32\0"+
    "\1\247\5\0\1\247\26\0\1\4\6\5\1\0\14\5"+
    "\1\327\2\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\1\5"+
    "\1\330\15\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\5\5"+
    "\1\331\11\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\10\5"+
    "\1\160\6\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\12\5"+
    "\1\156\4\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\11\5"+
    "\1\254\5\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\1\5"+
    "\1\71\15\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\7\5"+
    "\1\332\7\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\17\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\1\5\1\255"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\7\5\1\333"+
    "\7\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\3\5\1\334"+
    "\13\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\11\5\1\335"+
    "\5\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\7\5\1\336"+
    "\7\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\4\5\1\337"+
    "\12\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\1\4\6\5\1\0\7\5\1\340"+
    "\7\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\2\5"+
    "\1\0\3\5\3\0\3\201\4\111\1\201\3\111\6\201"+
    "\1\111\2\201\1\111\6\201\1\113\4\201\1\111\1\201"+
    "\1\0\2\201\2\111\5\201\1\111\20\201\3\116\4\33"+
    "\1\116\3\33\6\116\1\33\2\116\1\33\12\116\1\211"+
    "\1\33\2\116\1\212\1\116\2\33\5\116\1\33\20\116"+
    "\1\4\6\5\1\0\14\5\1\341\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\3\5\1\342\13\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\7\57\1\0\12\57\1\343\4\57\10\0\3\57\2\0"+
    "\3\57\2\0\1\343\1\57\1\0\1\57\1\0\3\57"+
    "\3\0\2\57\1\0\3\57\3\0\7\57\1\0\5\57"+
    "\1\343\11\57\10\0\3\57\2\0\3\57\2\0\1\57"+
    "\1\343\1\0\1\57\1\0\3\57\3\0\2\57\1\0"+
    "\3\57\3\0\7\4\1\0\3\4\1\301\13\4\10\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\3\0\7\4\1\0"+
    "\2\4\1\344\14\4\10\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\3\4\3\0\7\4\1\0\1\4\1\344\15\4\10\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\3\0\7\4\1\0"+
    "\10\4\1\345\6\4\10\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\3\4\3\0\7\4\1\0\1\4\1\301\15\4\10\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\3\0\7\4\1\0"+
    "\5\4\1\346\11\4\10\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\3\4\3\0\7\4\1\0\15\4\1\347\1\4\10\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\3\4\15\0\1\233\72\0"+
    "\1\350\77\0\1\351\2\0\1\352\75\0\1\353\65\0"+
    "\1\354\3\0\1\316\101\0\1\355\67\0\1\352\70\0"+
    "\1\354\110\0\1\356\50\0\1\4\6\5\1\0\4\5"+
    "\1\357\12\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\35\0\1\360\60\0\1\240\47\0"+
    "\1\321\7\0\1\323\1\361\4\323\1\361\17\323\3\361"+
    "\1\323\1\361\1\0\2\361\1\0\2\323\2\0\3\323"+
    "\1\0\1\361\2\323\1\361\1\323\1\0\1\361\1\323"+
    "\4\361\2\323\1\361\3\323\1\0\2\361\32\0\1\362"+
    "\60\0\1\244\47\0\1\324\7\0\1\326\1\363\4\326"+
    "\1\363\17\326\3\363\1\326\1\363\1\0\2\363\1\0"+
    "\2\326\2\0\3\326\1\0\1\363\2\326\1\363\1\326"+
    "\1\0\1\363\1\326\4\363\2\326\1\363\3\326\1\0"+
    "\2\363\1\4\6\5\1\0\4\5\1\364\12\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\3\0\2\5\1\0\3\5"+
    "\3\0\1\4\6\5\1\0\17\5\10\0\1\4\2\5"+
    "\2\0\1\161\2\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\3\0\2\5\1\0\3\5\3\0"+
    "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\1\156\1\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\4\5\1\365\12\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\14\5\1\366\2\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\14\5\1\160\2\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\17\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\1\5\1\367\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\14\5\1\370\2\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\11\5\1\71\5\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\1\371\16\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\3\0\2\5\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\1\372\16\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\10\5"+
    "\1\373\6\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\7\4\1\0\7\4\1\344"+
    "\7\4\10\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\3\4\3\0"+
    "\7\4\1\0\12\4\1\374\4\4\10\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\3\4\3\0\7\4\1\0\16\4\1\375"+
    "\10\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\3\4\16\0\1\351"+
    "\73\0\1\376\73\0\1\376\103\0\1\377\65\0\1\351"+
    "\100\0\1\u0100\104\0\1\u0101\47\0\1\4\6\5\1\0"+
    "\17\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\1\u0102"+
    "\1\5\1\0\3\5\35\0\1\323\74\0\1\326\42\0"+
    "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\1\5\1\173\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\255\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\7\5\1\u0103\7\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\1\5\1\u0104\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\3\0\2\5\1\0\3\5\3\0\1\4"+
    "\6\5\1\0\16\5\1\156\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\1\5\1\257\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\1\5\1\u0105\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\17\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\1\5\1\u0106\1\0\3\5\3\0\7\4\1\0\1\302"+
    "\16\4\10\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\3\4\3\0"+
    "\7\4\1\0\14\4\1\344\2\4\10\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\3\4\22\0\1\376\77\0\1\u0107\100\0"+
    "\1\u0108\46\0\1\4\6\5\1\0\10\5\1\u0109\6\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\3\5\3\0\1\4\6\5\1\0\3\5\1\173\13\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\3\5\3\0\1\4\6\5\1\0\7\5\1\160\7\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\3\5\3\0\1\4\6\5\1\0\3\5\1\u010a\13\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\3\5\3\0\1\4\6\5\1\0\1\5\1\u010b\15\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\3\0\2\5\1\0"+
    "\3\5\13\0\1\352\110\0\1\376\50\0\1\4\1\5"+
    "\1\u010c\4\5\1\0\17\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\7\5\1\254\7\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\11\5\1\156\5\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\16\5\1\u010d\10\0\1\4\2\5\2\0\1\u010e"+
    "\2\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\14\5\1\u010f\2\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\1\5\1\u0110\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\3\0\2\5\1\0\3\5\3\0\1\4\6\5"+
    "\1\0\17\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\1\5\1\u0111\1\0\3\5\3\0\1\4\6\5\1\0"+
    "\17\5\10\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\3\0\1\5"+
    "\1\u0112\1\0\3\5\3\0\1\4\6\5\1\0\7\5"+
    "\1\77\7\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\10\5"+
    "\1\u0113\6\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0\1\4\6\5\1\0\7\5"+
    "\1\257\7\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\3\0"+
    "\2\5\1\0\3\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15311];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\17\1\1\11\2\1\2\11\2\1\1\11\10\1"+
    "\1\11\2\1\1\11\5\1\1\11\31\1\1\0\2\11"+
    "\2\1\1\11\3\1\1\11\12\1\1\0\1\1\2\0"+
    "\1\11\6\0\1\1\1\0\33\1\1\11\7\1\1\11"+
    "\15\1\6\0\1\1\10\0\1\1\1\0\36\1\4\0"+
    "\1\1\4\0\1\1\2\0\1\1\2\0\22\1\7\0"+
    "\1\1\4\0\12\1\1\11\3\0\5\1\2\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

    /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;
  
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PortugolTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PortugolTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PortugolTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }



  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { addToken(Token.PREPROCESSOR);
          }
        case 30: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 23: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 35: break;
        case 25: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 36: break;
        case 18: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 37: break;
        case 24: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 38: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 39: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 40: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 41: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 42: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 44: break;
        case 27: 
          { addToken(Token.FUNCTION);
          }
        case 45: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 46: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 47: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 48: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 49: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 50: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 10: 
          { 
          }
        case 57: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 276: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 277: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 278: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
