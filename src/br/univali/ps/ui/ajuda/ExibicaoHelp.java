/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.univali.ps.ui.ajuda;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Carlos
 */
public class ExibicaoHelp extends javax.swing.JPanel implements FuncoesHelp, Printable
{
    int tamanhoFonte = 12;
    String styleCss = "<style type=\"text/css\">"
            + "h1 {font-size: 17px; }"
            + "h2 {font-size: " + tamanhoFonte + "px;}"
            + "pre {font-size: 12px; font-family:courier;}"
            + "h3 {font-size: 15px;}"
            + "</style>";

    /**
     * Creates new form exibicaoHelp
     */
    public ExibicaoHelp()
    {
        initComponents();
        this.setBackground(Color.WHITE);
        jEditorPane1.setContentType("text/html");
        jEditorPane1.setText("<html><h1>Help PortugolStudio</h1>");
        this.repaint();             
    }

    public void displayPage(String page)
    {

// Check if user has specified any command line parameter
        if (page != null && page.trim().length() > 0)
        {

            /* User may specify one of the following
             1. A relative path for a local file
             2. An absolute path for a local file
             3. A URL
             Check for a valid user input
             */

            File localFile = new File(page);

            // Chgeck if the file exists on the dist
            if (localFile.exists() && localFile.isFile())
            {
                /* Check if user specified the absolute path
                 Add the file protocol in front of file name */

                page = "file:///" + localFile.getAbsolutePath();
                try
                {
                    jEditorPane1.setPage(page);
                }
                catch (Exception e1)
                {
                    // Not a valid URL
                    jEditorPane1.setText("Could not load page:" + page + "\n"
                            + "Error:" + e1.getMessage());
                }
            }
        }
    }

    public void trocaTexto(String titulo, String explicacao)
    {
        jEditorPane1.setText("<html><h2>" + titulo + "</h2><h3><br>" + explicacao + "</h3></html>");
    }

    public void trocaTexto(String titulo, String explicacao, String exemplo1)
    {
        jEditorPane1.setText("<html><h2>" + titulo + "</h2><h3><br>" + explicacao + "</h3><br><br><h3>" + exemplo1 + "</h3></html>");
    }

    public void trocaTexto(String titulo, String explicacao, String exemplo1, String exemplo2)
    {
        jEditorPane1.setText("<html><h2>" + titulo + "</h2><h3><br>" + explicacao + "</h3><br><br><h3>" + exemplo1 + "</h3><br><h3>" + exemplo2 + "</h3></html>");
    }

    public void trocaTexto(String titulo, String explicacao, String exemplo1, String exemplo2, String exemplo3)
    {
        String tituloExemplo = "<h2>Exemplos:</h2><br>";
        if (exemplo1.equalsIgnoreCase(" ") && exemplo2.equalsIgnoreCase(" ") && exemplo3.equalsIgnoreCase(" "))
        {
            tituloExemplo = " ";
        }                
        jEditorPane1.setText("<html>" + styleCss + "<h1>" + titulo + "<h1><h2><br>" + explicacao + "</h2><br><h3>" + tituloExemplo + "<h3><br><pre>" + exemplo1 + "<br>" + exemplo2 + "<br>" + exemplo3 + "</pre></html>");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void aumentarFonte()
    {
        this.tamanhoFonte += 2;
        repaint();
    }

    @Override
    public void diminuirFonte()
    {
        this.tamanhoFonte -= 2;
        repaint();
    }

    @Override
    public void imprimeAba()
    {
        try
        {
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPrintable(this);
            job.printDialog();
            job.print();
        }
        catch (PrinterException ex)
        {
        }
    }

    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException
    {
        try
        {
            System.out.println("cheguei");
            if (pageIndex > 0)
            {
                return NO_SUCH_PAGE;
            }
            Graphics2D g2d = (Graphics2D) graphics;
            //Punto donde empezará a imprimir dentro la pagina (100, 50)
            g2d.translate(pageFormat.getImageableX() + 100,
                    pageFormat.getImageableY() + 50);
            g2d.scale(0.50, 0.50); //Reducción de la impresión al 50%
            this.printAll(graphics);
            return PAGE_EXISTS;
        }
        catch (Exception e)
        {
        }
        return 0;
    }
}
